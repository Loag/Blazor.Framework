@namespace Tavenem.Blazor.Framework

@inherits FormComponentBase<string>

<div @attributes="AdditionalAttributes" class="@CssClass" style="@CssStyle">
    <textarea name="@Name"
              hidden
              readonly
              required="@Required"
              value="@Value" />
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    @if (DisplayToolbar)
    {
        <div class="editor-toolbar">
            <div>
                @if (DisplayCommands)
                {
                    <Tooltip TooltipText="undo" Delay="750">
                        <button class="btn btn-icon small"
                                @onclick="@(_ => CommandAsync(EditorCommandType.Undo))"
                                disabled="@(IsDisabled(EditorCommandType.Undo))">
                            <tf-icon>@DefaultIcons.Undo</tf-icon>
                        </button>
                    </Tooltip>
                    <Tooltip TooltipText="redo" Delay="750">
                        <button class="btn btn-icon small"
                                @onclick="@(_ => CommandAsync(EditorCommandType.Redo))"
                                disabled="@(IsDisabled(EditorCommandType.Redo))">
                            <tf-icon>@DefaultIcons.Redo</tf-icon>
                        </button>
                    </Tooltip>
                    <div class="vr"></div>
                    <Dropdown Icon="@DefaultIcons.Bold"
                              ActivationType="MouseEvent.RightClick | MouseEvent.MouseOver"
                              Click="@(_ => CommandAsync(EditorCommandType.Strong))"
                              Disabled="@(IsDisabled(EditorCommandType.Strong) && IsDisabled(EditorCommandType.Bold))"
                              Delay="1000"
                              Dense="true">
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Strong))">
                            @if (IsActive(EditorCommandType.Strong))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Strong</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Bold))">
                            @if (IsActive(EditorCommandType.Bold))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Bold</span>
                        </span>
                    </Dropdown>
                    <Dropdown Icon="@DefaultIcons.Italic"
                              ActivationType="MouseEvent.RightClick | MouseEvent.MouseOver"
                              Click="@(_ => CommandAsync(EditorCommandType.Emphasis))"
                              Disabled="@(IsDisabled(EditorCommandType.Emphasis) && IsDisabled(EditorCommandType.Italic))"
                              Delay="1000"
                              Dense="true">
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Emphasis))">
                            @if (IsActive(EditorCommandType.Emphasis))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Emphasis</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Italic))">
                            @if (IsActive(EditorCommandType.Italic))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Italic</span>
                        </span>
                    </Dropdown>
                    <div id="editor-additional-marks-group" class="button-group small">
                        <Tooltip TooltipText="underline" Delay="750">
                            <button class="@(ActiveButtonGroupClass(EditorCommandType.Underline))"
                                    @onclick="@(_ => CommandAsync(EditorCommandType.Underline))"
                                    disabled="@(IsDisabled(EditorCommandType.Underline))">
                                <tf-icon>@DefaultIcons.Underlined</tf-icon>
                            </button>
                        </Tooltip>
                        <Dropdown AnchorId="editor-additional-marks-group"
                                  Icon="@DefaultIcons.DropDown"
                                  Disabled="ReadOnly"
                                  Dense="true"
                                  Class="rounded-right">
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.Strikethrough))">
                                @if (IsActive(EditorCommandType.Strikethrough))
                                {
                                    <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                                }
                                <tf-icon>@DefaultIcons.Strikethrough</tf-icon>
                            </span>
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.Subscript))">
                                @if (IsActive(EditorCommandType.Subscript))
                                {
                                    <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                                }
                                <tf-icon>@DefaultIcons.Subscript</tf-icon>
                            </span>
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.Superscript))">
                                @if (IsActive(EditorCommandType.Superscript))
                                {
                                    <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                                }
                                <tf-icon>@DefaultIcons.Superscript</tf-icon>
                            </span>
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.CodeInline))">
                                @if (IsActive(EditorCommandType.CodeInline))
                                {
                                    <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                                }
                                <tf-icon>@DefaultIcons.Code</tf-icon>
                            </span>
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.Small))">
                                @if (IsActive(EditorCommandType.Small))
                                {
                                    <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                                }
                                <tf-icon>@DefaultIcons.FontSize</tf-icon>
                            </span>
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.Inserted))">
                                @if (IsActive(EditorCommandType.Inserted))
                                {
                                    <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                                }
                                <tf-icon>@DefaultIcons.Add</tf-icon>
                            </span>
                        </Dropdown>
                    </div>
                    <div class="vr"></div>
                    <Dropdown Icon="@DefaultIcons.Style" Disabled="ReadOnly" Dense="true">
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Heading1))">
                            @if (IsActive(EditorCommandType.Heading1))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Heading 1</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Heading2))">
                            @if (IsActive(EditorCommandType.Heading2))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Heading 2</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Heading3))">
                            @if (IsActive(EditorCommandType.Heading3))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Heading 3</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Heading4))">
                            @if (IsActive(EditorCommandType.Heading4))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Heading 4</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Heading5))">
                            @if (IsActive(EditorCommandType.Heading5))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Heading 5</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Heading6))">
                            @if (IsActive(EditorCommandType.Heading6))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Heading 6</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.Paragraph))">
                            @if (IsActive(EditorCommandType.Paragraph))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Paragraph</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.BlockQuote))">
                            @if (IsActive(EditorCommandType.BlockQuote))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Block quote</span>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.CodeBlock))">
                            @if (IsActive(EditorCommandType.CodeBlock))
                            {
                                <tf-icon class="me-1">@DefaultIcons.Selected</tf-icon>
                            }
                            <span>Code block</span>
                        </span>
                    </Dropdown>
                    <div class="vr"></div>
                    <Tooltip TooltipText="link" Delay="750">
                        <button class="@ActiveButtonClass(EditorCommandType.InsertLink)"
                                @onclick="ShowLinkDialogAsync"
                                disabled="@(IsDisabled(EditorCommandType.InsertLink))">
                            <tf-icon>@(IsActive(EditorCommandType.InsertLink) ? DefaultIcons.UnLink : DefaultIcons.Link)</tf-icon>
                        </button>
                    </Tooltip>
                    <Tooltip TooltipText="image" Delay="750">
                        <button class="@ActiveButtonClass(EditorCommandType.InsertImage)"
                                @onclick="ShowImgDialog"
                                disabled="@(IsDisabled(EditorCommandType.InsertImage))">
                            <tf-icon>@DefaultIcons.Image</tf-icon>
                        </button>
                    </Tooltip>
                    <div class="vr"></div>
                    <Dropdown Icon="@DefaultIcons.List_Bullet"
                              ActivationType="MouseEvent.RightClick | MouseEvent.MouseOver"
                              Click="@(_ => CommandAsync(EditorCommandType.ListBullet))"
                              Disabled="@(IsDisabled(EditorCommandType.ListBullet) && IsDisabled(EditorCommandType.ListNumber) && IsDisabled(EditorCommandType.ListCheck))"
                              Delay="1000"
                              Dense="true">
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.ListBullet))">
                            <tf-icon>@DefaultIcons.List_Bullet</tf-icon>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.ListNumber))">
                            <tf-icon>@DefaultIcons.List_Number</tf-icon>
                        </span>
                        <span @onclick="@(_ => CommandAsync(EditorCommandType.ListCheck))">
                            <tf-icon>@DefaultIcons.List_Check</tf-icon>
                        </span>
                    </Dropdown>
                    <div id="editor-lists-group" class="button-group small">
                        <Tooltip TooltipText="list" Delay="750">
                            <button class="btn btn-icon"
                                    @onclick="@(_ => CommandAsync(EditorCommandType.ListBullet))"
                                    disabled="@(IsDisabled(EditorCommandType.ListBullet))">
                                <tf-icon>@DefaultIcons.List_Bullet</tf-icon>
                            </button>
                        </Tooltip>
                        <Dropdown AnchorId="editor-lists-group"
                                  Icon="@DefaultIcons.DropDown"
                                  Disabled="@(ReadOnly || (IsDisabled(EditorCommandType.ListNumber) && IsDisabled(EditorCommandType.ListCheck)))"
                                  Dense="true"
                                  Class="rounded-right">
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.ListNumber))">
                                <tf-icon>@DefaultIcons.List_Number</tf-icon>
                            </span>
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.ListCheck))">
                                <tf-icon>@DefaultIcons.List_Check</tf-icon>
                            </span>
                        </Dropdown>
                    </div>
                    <Tooltip TooltipText="decrease indent" Delay="750">
                        <button class="btn btn-icon small"
                                @onclick="@(_ => CommandAsync(EditorCommandType.UpLevel))"
                                disabled="@(IsDisabled(EditorCommandType.UpLevel))">
                            <tf-icon>@DefaultIcons.Indent_Decrease</tf-icon>
                        </button>
                    </Tooltip>
                    <Tooltip TooltipText="increase indent" Delay="750">
                        <button class="btn btn-icon small"
                                @onclick="@(_ => CommandAsync(EditorCommandType.DownLevel))"
                                disabled="@(IsDisabled(EditorCommandType.DownLevel))">
                            <tf-icon>@DefaultIcons.Indent_Increase</tf-icon>
                        </button>
                    </Tooltip>
                    <div class="vr"></div>
                }
                <Tooltip TooltipText="@(ShowAdvanced ? "hide advanced commands" : "show advanced commands")"
                         Delay="750"
                         Class="ms-auto">
                    <button class="@ShowAdvancedClass" @onclick="@(_ => ShowAdvanced = !ShowAdvanced)">
                        <tf-icon>@DefaultIcons.More</tf-icon>
                    </button>
                </Tooltip>
            </div>
            @if (ShowAdvanced)
            {
                <div>
                    @if (DisplayCommands)
                    {
                        <Tooltip TooltipText="highlight" Delay="750">
                            <button class="@ActiveButtonClass(EditorCommandType.Marked)"
                                    @onclick="@(_ => CommandAsync(EditorCommandType.Marked))"
                                    disabled="@(IsDisabled(EditorCommandType.Marked))">
                                <mark style="width:1.5em"></mark>
                            </button>
                        </Tooltip>
                        <Tooltip TooltipText="foreground color" Delay="750">
                            <ColorInput @ref="ForegroundPicker"
                                        TValue="string"
                                        Value="@CurrentForeground"
                                        ValueChanged="SetForegroundAsync"
                                        DisplayType="PickerDisplayType.Button"
                                        IconButton="true"
                                        Disabled="IsDisabled(EditorCommandType.ForegroundColor)" />
                        </Tooltip>
                        <Dropdown AnchorId="@ForegroundPicker?.Id"
                                  ActivationType="MouseEvent.RightClick"
                                  Dense="true"
                                  Disabled="IsDisabled(EditorCommandType.ForegroundColor)"
                                  OpenAtPointer="true">
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.ForegroundColor))">Clear</span>
                        </Dropdown>
                        <Tooltip TooltipText="background color" Delay="750">
                            <ColorInput @ref="BackgroundPicker"
                                        TValue="string"
                                        Value="@CurrentBackground"
                                        ValueChanged="SetBackgroundAsync"
                                        DisplayType="PickerDisplayType.Button"
                                        IconButton="true"
                                        Disabled="IsDisabled(EditorCommandType.BackgroundColor)" />
                        </Tooltip>
                        <Dropdown AnchorId="@BackgroundPicker?.Id"
                                  ActivationType="MouseEvent.RightClick"
                                  Dense="true"
                                  Disabled="IsDisabled(EditorCommandType.BackgroundColor)"
                                  OpenAtPointer="true">
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.BackgroundColor))">Clear</span>
                        </Dropdown>
                        <div class="vr"></div>
                        <Tooltip TooltipText="align left" Delay="750">
                            <button class="@ActiveButtonClass(EditorCommandType.AlignLeft)"
                                    @onclick="@(_ => CommandAsync(EditorCommandType.AlignLeft))"
                                    disabled="@(IsDisabled(EditorCommandType.AlignLeft))">
                                <tf-icon>@DefaultIcons.AlignLeft</tf-icon>
                            </button>
                        </Tooltip>
                        <Tooltip TooltipText="align center" Delay="750">
                            <button class="@ActiveButtonClass(EditorCommandType.AlignCenter)"
                                    @onclick="@(_ => CommandAsync(EditorCommandType.AlignCenter))"
                                    disabled="@(IsDisabled(EditorCommandType.AlignCenter))">
                                <tf-icon>@DefaultIcons.AlignCenter</tf-icon>
                            </button>
                        </Tooltip>
                        <Tooltip TooltipText="align right" Delay="750">
                            <button class="@ActiveButtonClass(EditorCommandType.AlignRight)"
                                    @onclick="@(_ => CommandAsync(EditorCommandType.AlignRight))"
                                    disabled="@(IsDisabled(EditorCommandType.AlignRight))">
                                <tf-icon>@DefaultIcons.AlignRight</tf-icon>
                            </button>
                        </Tooltip>
                        <div class="vr"></div>
                        <Dropdown Icon="@DefaultIcons.List_Bullet"
                                  ActivationType="MouseEvent.RightClick | MouseEvent.MouseOver"
                                  Click="@(_ => CommandAsync(EditorCommandType.ListBullet))"
                                  Disabled="@(IsDisabled(EditorCommandType.ListBullet) && IsDisabled(EditorCommandType.ListNumber) && IsDisabled(EditorCommandType.ListCheck))"
                                  Delay="1000"
                                  Dense="true">
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.ListBullet))">
                                <tf-icon>@DefaultIcons.List_Bullet</tf-icon>
                            </span>
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.ListNumber))">
                                <tf-icon>@DefaultIcons.List_Number</tf-icon>
                            </span>
                            <span @onclick="@(_ => CommandAsync(EditorCommandType.ListCheck))">
                                <tf-icon>@DefaultIcons.List_Check</tf-icon>
                            </span>
                        </Dropdown>
                        <Dropdown Icon="@DefaultIcons.Font"
                                  Disabled="IsDisabled(EditorCommandType.SetFontFamily)"
                                  Dense="true">
                            @foreach (var font in Fonts)
                            {
                                <span @onclick="@(_ => SetFontFamilyAsync(font))">@font</span>
                            }
                        </Dropdown>
                        <Tooltip TooltipText="font size" Delay="750">
                            <button class="btn btn-icon small"
                                    @onclick="ShowFontSizeDialog"
                                    disabled="@(IsDisabled(EditorCommandType.SetFontSize))">
                                <tf-icon>@DefaultIcons.FontSize</tf-icon>
                            </button>
                        </Tooltip>
                        <Tooltip TooltipText="line height" Delay="750">
                            <button class="btn btn-icon small"
                                    @onclick="ShowLineHeightDialog"
                                    disabled="@(IsDisabled(EditorCommandType.SetLineHeight))">
                                <tf-icon>@DefaultIcons.LineHeight</tf-icon>
                            </button>
                        </Tooltip>
                        <div class="vr"></div>
                        <Tooltip TooltipText="horizontal rule" Delay="750">
                            <button class="btn btn-icon small"
                                    @onclick="@(_ => CommandAsync(EditorCommandType.HorizontalRule))"
                                    disabled="@(IsDisabled(EditorCommandType.HorizontalRule))">
                                <tf-icon>@DefaultIcons.HorizontalRule</tf-icon>
                            </button>
                        </Tooltip>
                        <Tooltip TooltipText="page break" Delay="750">
                            <button class="btn btn-icon small"
                                    @onclick="@(_ => CommandAsync(EditorCommandType.PageBreak))"
                                    disabled="@(IsDisabled(EditorCommandType.PageBreak))">
                                <tf-icon>@DefaultIcons.PageBreak</tf-icon>
                            </button>
                        </Tooltip>
                        <div class="vr"></div>
                    }
                    @if (IsWysiwyg && !IsDisabled(EditorCommandType.SetCodeSyntax))
                    {
                        <Select TValue="EditorSyntax"
                                Value="Syntax"
                                ValueChanged="@(v => SetSyntax(v))"
                                Disabled="ReadOnly"
                                Class="dense">
                            @foreach (var syntax in Enum.GetValues<EditorSyntax>())
                            {
                                switch (syntax)
                                {
                                    case EditorSyntax.None:
                                        <Option Value="syntax" Label="Plain text" />
                                        break;
                                    case EditorSyntax.Cpp:
                                        <Option Value="syntax" Label="C++" />
                                        break;
                                    case EditorSyntax.CSharp:
                                        <Option Value="syntax" Label="C#" />
                                        break;
                                    case EditorSyntax.LaTeX:
                                        <Option Value="syntax" Label="LaTeX">
                                            <span style="font-family:'CMU Serif',cmr10,LMRoman10-Regular,'Latin Modern Math','Nimbus Roman No9 L','Times New Roman',Times,serif;">L<span style="text-transform:uppercase;font-size:.75em;vertical-align:.25em;margin-left:-.36em;margin-right:-.15em;line-height:1ex;">a</span>T<span style="text-transform:uppercase;vertical-align:-.25em;margin-left:-.1667em;margin-right:-.125em;line-height:1ex;">e</span>X</span>
                                        </Option>
                                        break;
                                    case EditorSyntax.ObjectiveC:
                                        <Option Value="syntax" Label="Objective-C" />
                                        break;
                                    default:
                                        <Option Value="syntax" Label="@syntax.ToString()" />
                                        break;
                                }
                            }
                        </Select>
                    }
                    @if (!LockEditMode && Syntax is EditorSyntax.HTML or EditorSyntax.Markdown)
                    {
                        <Tooltip TooltipText="@(EditMode == EditorMode.WYSIWYG ? "Edit source code" : "Edit in rich text mode")" Delay="750">
                            <button class="btn btn-icon small" @onclick="ToggleModeAsync">
                                @if (EditMode == EditorMode.WYSIWYG)
                                {
                                    <tf-icon>@DefaultIcons.Source</tf-icon>
                                }
                                else
                                {
                                    <tf-icon>@DefaultIcons.Preview</tf-icon>
                                }
                            </button>
                        </Tooltip>
                    }
                    @if (!LockSyntax)
                    {
                        <Select TValue="EditorSyntax"
                                Value="Syntax"
                                ValueChanged="@(v => SetSyntax(v))"
                                Disabled="ReadOnly"
                                Class="dense">
                            @foreach (var syntax in Enum.GetValues<EditorSyntax>())
                            {
                                switch (syntax)
                                {
                                    case EditorSyntax.None:
                                        <Option Value="syntax" Label="Plain text" />
                                        break;
                                    case EditorSyntax.Cpp:
                                        <Option Value="syntax" Label="C++" />
                                        break;
                                    case EditorSyntax.CSharp:
                                        <Option Value="syntax" Label="C#" />
                                        break;
                                    case EditorSyntax.LaTeX:
                                        <Option Value="syntax" Label="LaTeX">
                                            <span style="font-family:'CMU Serif',cmr10,LMRoman10-Regular,'Latin Modern Math','Nimbus Roman No9 L','Times New Roman',Times,serif;">L<span style="text-transform:uppercase;font-size:.75em;vertical-align:.25em;margin-left:-.36em;margin-right:-.15em;line-height:1ex;">a</span>T<span style="text-transform:uppercase;vertical-align:-.25em;margin-left:-.1667em;margin-right:-.125em;line-height:1ex;">e</span>X</span>
                                        </Option>
                                        break;
                                    case EditorSyntax.ObjectiveC:
                                        <Option Value="syntax" Label="Objective-C" />
                                        break;
                                    default:
                                        <Option Value="syntax" Label="@syntax.ToString()" />
                                        break;
                                }
                            }
                        </Select>
                    }
                </div>
            }
        </div>
    }
    <div id="@Id"
         class="@EditorClass"
         style="@EditorStyle"
         spellcheck="@SpellcheckValue"
         tabindex="@TabIndex"></div>
    @if (!IsValid)
    {
        <div class="field-helpers">
            <ul class="mr-auto mb-0 pl-0">
                @foreach (var message in GetValidationMessages())
                {
                    <li>@message</li>
                }
            </ul>
        </div>
    }
</div>

<Dialog @bind-IsVisible="_isLinkDialogVisible">
    <TitleContent>
        <h6>Link</h6>
    </TitleContent>
    <ChildContent>
        <Form @ref="LinkForm" Model="Link">
            <TextInput Label="URL"
                       @bind-Value="Link.Url"
                       Validation="ValidateUri"
                       Required="true" />
            <TextInput Label="Title (optional)"
                       @bind-Value="Link.Title" />
        </Form>
    </ChildContent>
    <FooterContent>
        <div class="message-box-buttons">
            <button @onclick="@(_ => _isLinkDialogVisible = false)" class="btn btn-text default">Cancel</button>
            <button @onclick="SubmitLinkDialogAsync" class="btn btn-text primary">Ok</button>
        </div>
    </FooterContent>
</Dialog>

<Dialog @bind-IsVisible="_isImgDialogVisible">
    <TitleContent>
        <h6>Image</h6>
    </TitleContent>
    <ChildContent>
        <Form @ref="ImgForm" Model="Img">
            <TextInput Label="URL"
                       @bind-Value="Img.Src"
                       Validation="ValidateUri"
                       Required="true" />
            <TextInput Label="Title (optional)"
                       @bind-Value="Img.Title" />
            <TextInput Label="Alt (optional)"
                       @bind-Value="Img.Alt" />
        </Form>
    </ChildContent>
    <FooterContent>
        <div class="message-box-buttons">
            <button @onclick="@(_ => _isImgDialogVisible = false)" class="btn btn-text default">Cancel</button>
            <button @onclick="SubmitImgDialogAsync" class="btn btn-text primary">Ok</button>
        </div>
    </FooterContent>
</Dialog>

<Dialog @bind-IsVisible="_isFontSizeDialogVisible">
    <TitleContent>
        <h6>Font Size</h6>
    </TitleContent>
    <ChildContent>
        <TextInput @ref="FontSizeInput"
                   @bind-Value="CurrentFontSize"
                   Placeholder="font size"
                   Suggestions="FontSizes"
                   Validation="ValidateFontSizeAsync" />
    </ChildContent>
    <FooterContent>
        <div class="message-box-buttons">
            <button @onclick="@(_ => _isFontSizeDialogVisible = false)" class="btn btn-text default">Cancel</button>
            <button @onclick="SetFontSizeAsync" class="btn btn-text primary">Ok</button>
        </div>
    </FooterContent>
</Dialog>

<Dialog @bind-IsVisible="_isLineHeightDialogVisible">
    <TitleContent>
        <h6>Line Height</h6>
    </TitleContent>
    <ChildContent>
        <TextInput @ref="LineHeightInput"
                   @bind-Value="CurrentLineHeight"
                   Placeholder="line height"
                   Suggestions="LineHeights"
                   Validation="ValidateLineHeightAsync" />
    </ChildContent>
    <FooterContent>
        <div class="message-box-buttons">
            <button @onclick="@(_ => _isLineHeightDialogVisible = false)" class="btn btn-text default">Cancel</button>
            <button @onclick="SetLineHeightAsync" class="btn btn-text primary">Ok</button>
        </div>
    </FooterContent>
</Dialog>
