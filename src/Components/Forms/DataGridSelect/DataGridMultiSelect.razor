@using Tavenem.Blazor.Framework.Components.DataGrid

@namespace Tavenem.Blazor.Framework

@attribute [CascadingTypeParameter(nameof(TDataItem))]
@typeparam TDataItem

@inherits DataGridSelectBase<TDataItem, IEnumerable<TDataItem>>

<div class="d-none">
    <CascadingValue Value="this" TValue="IDataGrid<TDataItem>" IsFixed="true">
        @ChildContent
    </CascadingValue>
</div>
<div @attributes="AdditionalAttributes"
     class="@CssClass"
     style="@CssStyle"
     @onclick="OnClickContainerAsync"
     @onkeydown="OnKeyDownAsync">
    <div class="input"
         @onfocusin="OnFocusIn"
         @onfocusout="OnFocusOut">
        <input disabled="@Disabled"
               name="@Name"
               hidden
               readonly
               required="@Required"
               value="@CurrentValueAsString" />
        <input @ref="ElementReference"
               @attributes="InputAttributes"
               id="@Id"
               class="@InputCssClass"
               style="@InputStyle"
               autofocus="@AutoFocus"
               disabled="@Disabled"
               placeholder="@Placeholder"
               readonly
               required="@Required"
               tabindex="@TabIndex"
               value="@DisplayString"
               @onclick="TogglePopover"
               @onclick:stopPropagation="true" />
        @if (CanClear)
        {
            <button class="btn btn-icon small" @onclick="ClearAsync">
                <tf-icon>@ClearIcon</tf-icon>
            </button>
        }
        <tf-icon class="expand" @onclick="TogglePopover" @onclick:stopPropagation="true">@DefaultIcons.Expand</tf-icon>
    </div>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    @if (!string.IsNullOrEmpty(HelpText)
        || !IsValid)
    {
        <div class="field-helpers">
            @if (!IsValid)
            {
                <ul class="mr-auto mb-0 pl-0">
                    @foreach (var message in GetValidationMessages())
                    {
                        <li>@message</li>
                    }
                </ul>
            }
            else if (!string.IsNullOrEmpty(HelpText))
            {
                <div class="mr-auto">@HelpText</div>
            }
        </div>
    }
    <Popover Class="filled"
             AnchorId="@Id"
             IsOpen="ShowPicker"
             MatchWidth="true">
        <div @onclick:stopPropagation="true">
            <DataGrid @ref="DataGrid"
                      TDataItem="TDataItem"
                      AllowExport="false"
                      Items="Items"
                      LoadItems="LoadItems"
                      RowsPerPage="5"
                      SelectionType="SelectionType.Multiple"
                      SelectedItemsChanged="UpdateCurrentValue"
                      ShowRowsPerPage="false"
                      ThemeColor="ThemeColor" />
        </div>
    </Popover>
    @if (ShowPicker)
    {
        <div @onclick="ClosePopoverAsync" @onclick:stopPropagation="true" class="overlay transparent" style="z-index:1499" />
    }
</div>
