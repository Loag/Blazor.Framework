@namespace Tavenem.Blazor.Framework

@attribute [CascadingTypeParameter(nameof(TValue))]
@typeparam TValue

@inherits SelectBase<IEnumerable<TValue>, TValue>

@code {
    private RenderFragment _optionRenderFragment =>
@<CascadingValue Value="this" IsFixed="true">
    @ChildContent
    @if (Options is not null)
    {
        if (OptionTemplate is null)
        {
            foreach (var value in Options)
            {
                <Option @key="value" Value="value" Label="@(Labels?.Invoke(value) ?? value?.ToString())" />
            }
        }
        else
        {
            foreach (var value in Options)
            {
                <Option @key="value" Value="value">
                    @OptionTemplate(context)
                </Option>
            }
        }
    }
    @if (OptionPairs is not null)
    {
        foreach (var (key, value) in OptionPairs)
        {
            <Option @key="key" Value="key" Label="@value" />
        }
    }
</CascadingValue>;
}

<div @attributes="AdditionalAttributes"
     class="@CssClass"
     style="@CssStyle"
     @onclick="OnClickContainerAsync"
     @onkeydown="OnKeyDownAsync">
    <div class="input"
         @onfocusin="OnFocusIn"
         @onfocusout="OnFocusOut">
        <input disabled="@Disabled"
               name="@Name"
               hidden
               readonly
               required="@Required"
               value="@CurrentValueAsString" />
        <input @ref="ElementReference"
               @attributes="InputAttributes"
               id="@Id"
               class="@InputCssClass"
               style="@InputStyle"
               autofocus="@AutoFocus"
               disabled="@Disabled"
               placeholder="@Placeholder"
               readonly
               required="@Required"
               tabindex="@TabIndex"
               value="@DisplayString"
               @onclick="TogglePopover"
               @onclick:stopPropagation="true" />
        @if (CanClear)
        {
            <button class="btn btn-icon small" @onclick="Clear">
                <tf-icon>@ClearIcon</tf-icon>
            </button>
        }
        <tf-icon class="expand" @onclick="TogglePopover" @onclick:stopPropagation="true">@DefaultIcons.Expand</tf-icon>
    </div>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    @if (!string.IsNullOrEmpty(HelpText)
        || !IsValid)
    {
        <div class="field-helpers">
            @if (!IsValid)
            {
                <ul class="mr-auto mb-0 pl-0">
                    @foreach (var message in GetValidationMessages())
                    {
                        <li>@message</li>
                    }
                </ul>
            }
            else if (!string.IsNullOrEmpty(HelpText))
            {
                <div class="mr-auto">@HelpText</div>
            }
        </div>
    }
    <div class="d-none">
        @_optionRenderFragment
    </div>
    <Popover Class="filled"
                AnchorId="@Id"
                IsOpen="ShowPicker"
                MatchWidth="true">
        <div class="@OptionListCssClass"
                @onclick:stopPropagation="true">
            <CascadingValue Value="true" IsFixed="true" Name="FromPopover">
                <Option @key="_selectAll" TValue="TValue" Value="default" Label="Select All" IsSelectAll="true" SeparatorAfter="true" />
                @_optionRenderFragment
            </CascadingValue>
        </div>
    </Popover>
</div>
