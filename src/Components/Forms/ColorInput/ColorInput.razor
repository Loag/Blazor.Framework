@namespace Tavenem.Blazor.Framework

@typeparam TValue

@inherits PickerComponentBase<TValue>

@code {
    private RenderFragment _contentRenderFragment =>
@<CascadingValue Name="IsNested" Value="true" IsFixed="true">
    <div class="input-content" @onclick:stopPropagation="true">
        <div class="color-picker">
            <div class="color-overlay" style="@OverlayStyle">
                <div class="color-overlay white">
                    <div id="@_overlayIdString" class="color-overlay black" @onclick="OnColorOverlayInteract">
                        @if (!Disabled && !ReadOnly)
                        {
                            <svg class="color-selector"
                                    height="26"
                                    width="26"
                                    style="@SelectorStyle"
                                    @onclick="OnSelectorClicked" @onclick:stopPropagation="true">
                                <defs>
                                    <filter id="color-selector-shadow" x="-50%" y="-50%" width="200%" height="200%">
                                        <feGaussianBlur in="SourceAlpha" stdDeviation="1" />
                                        <feOffset dx="0" dy="5" result="offsetblur" />
                                        <feOffset dx="0" dy="-5" result="offsetblur" />
                                        <feMerge><feMergeNode /><feMergeNode in="SourceGraphic" /></feMerge>
                                    </filter>
                                </defs>
                                <circle r="10" cx="13" cy="13" stroke="white" stroke-width="1" fill="transparent" style="filter: url(#color-selector-shadow)" />
                                <circle r="11" cx="13" cy="13" stroke="white" stroke-width="1.5" fill="transparent" />
                            </svg>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="color-controls">
            <div class="d-flex align-items-center">
                <div class="color-swatch">
                    <div class="swatch-fill" style="@SwatchStyle"></div>
                </div>
                <div class="color-sliders">
                    <Slider @ref="HueSlider"
                            TValue="ushort"
                            Value="Hue"
                            ValueChanged="OnHueChanged"
                            AutoFocus="@(Inline ? AutoFocus : false)"
                            Class="hue"
                            Disabled="Disabled"
                            Max="359"
                            ReadOnly="ReadOnly"
                            TabIndex="@(Inline ? TabIndex : 0)"
                            UpdateOnInput="true" />
                    @if (ShowAlpha)
                    {
                        <Slider TValue="float"
                                Value="Alpha"
                                ValueChanged="OnAlphaSliderChanged"
                                Max="1f"
                                Disabled="Disabled"
                                ReadOnly="ReadOnly"
                                Class="alpha"
                                Style="@AlphaSliderStyle"
                                UpdateOnInput="true" />
                    }
                </div>
            </div>
            <div class="d-flex flex-fill align-items-center gap-2 mt-4">
                @switch (ColorMode)
                {
                    case ColorMode.Hex:
                        <TextInput Value="@HexInput"
                                    ValueChanged="OnHexChanged"
                                    HelpText="HEX"
                                    InputClass="text-center"
                                    Clearable="false"
                                    Disabled="Disabled"
                                    ReadOnly="ReadOnly"
                                    ThemeColor="ThemeColor"
                                    Class="outlined dense" />
                        break;
                    case ColorMode.HSL:
                        <NumericInput TValue="ushort"
                                        Value="Hue"
                                        ValueChanged="OnHueChanged"
                                        Max="359"
                                        HelpText="H"
                                        Disabled="Disabled"
                                        ReadOnly="ReadOnly"
                                        Class="outlined dense"
                                        ShowStepButtons="false"
                                        ThemeColor="ThemeColor" />
                        <NumericInput TValue="byte"
                                        Value="Saturation"
                                        ValueChanged="OnSaturationChanged"
                                        Max="100"
                                        HelpText="S"
                                        Disabled="Disabled"
                                        ReadOnly="ReadOnly"
                                        Class="outlined dense"
                                        ShowStepButtons="false"
                                        ThemeColor="ThemeColor" />
                        <NumericInput TValue="byte"
                                        Value="Lightness"
                                        ValueChanged="OnLightnessChanged"
                                        Max="100"
                                        HelpText="L"
                                        Disabled="Disabled"
                                        ReadOnly="ReadOnly"
                                        Class="outlined dense"
                                        ShowStepButtons="false"
                                        ThemeColor="ThemeColor" />
                        break;
                    case ColorMode.RGB:
                        <NumericInput TValue="byte"
                                        Value="Red"
                                        ValueChanged="OnRedChanged"
                                        HelpText="R"
                                        Disabled="Disabled"
                                        ReadOnly="ReadOnly"
                                        Class="outlined dense"
                                        ShowStepButtons="false"
                                        ThemeColor="ThemeColor" />
                        <NumericInput TValue="byte"
                                        Value="Green"
                                        ValueChanged="OnGreenChanged"
                                        HelpText="G"
                                        Disabled="Disabled"
                                        ReadOnly="ReadOnly"
                                        Class="outlined dense"
                                        ShowStepButtons="false"
                                        ThemeColor="ThemeColor" />
                        <NumericInput TValue="byte"
                                        Value="Blue"
                                        ValueChanged="OnBlueChanged"
                                        HelpText="B"
                                        Disabled="Disabled"
                                        ReadOnly="ReadOnly"
                                        Class="outlined dense"
                                        ShowStepButtons="false"
                                        ThemeColor="ThemeColor" />
                        break;
                }
                @if (ShowAlpha && ColorMode != ColorMode.Hex)
                {
                    <NumericInput TValue="float"
                                    Value="Alpha"
                                    ValueChanged="OnAlphaValueChanged"
                                    Min="0"
                                    Max="1"
                                    Step="0.01f"
                                    HelpText="A"
                                    Disabled="Disabled"
                                    ReadOnly="ReadOnly"
                                    Class="outlined dense"
                                    ShowStepButtons="false"
                                    ThemeColor="ThemeColor" />
                }
                <button class="@CycleButtonClass" @onclick="OnCycleMode">
                    <tf-icon>@DefaultIcons.ModeSwitch</tf-icon>
                </button>
            </div>
        </div>
    </div>
</CascadingValue>;
}

<div @attributes="AdditionalAttributes"
     class="@CssClass"
     style="@CssStyle"
     @onclick="OnClickContainerAsync"
     @onkeydown="OnKeyDownAsync">
    <div class="input"
         style="@(Inline ? "display:none" : null)"
         @onfocusin="OnFocusIn"
         @onfocusout="OnFocusOut">
        <input disabled="@Disabled"
               name="@Name"
               hidden
               readonly
               required="@Required"
               value="@CurrentValueAsString" />
        <input @ref="ElementReference"
               @attributes="InputAttributes"
               id="@Id"
               class="@InputCssClass"
               style="@InputStyle"
               autofocus="@(Inline ? false : AutoFocus)"
               disabled="@Disabled"
               placeholder="@Placeholder"
               readonly
               required="@Required"
               tabindex="@(Inline ? -1 : TabIndex)"
               value="@DisplayString"
               @onclick="TogglePopover"
               @onclick:stopPropagation="true" />
        @if (CanClear)
        {
            <button class="btn btn-icon small" disabled="@(Disabled || ReadOnly)" @onclick="Clear">
                <tf-icon>@ClearIcon</tf-icon>
            </button>
        }
        <tf-icon class="expand" @onclick="TogglePopover" @onclick:stopPropagation="true">@DefaultIcons.ColorSelect</tf-icon>
    </div>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    @if (Inline)
    {
        @_contentRenderFragment
    }
    else
    {
        <Popover Class="filled"
                 AnchorId="@Id"
                 AnchorOrigin="Origin.Bottom_Left"
                 IsOpen="ShowPicker"
                 PopoverOrigin="Origin.Top_Left">
            @_contentRenderFragment
        </Popover>
        @if (ShowPicker)
        {
            <div @onclick="ClosePopoverAsync" @onclick:stopPropagation="true" class="overlay transparent" style="z-index:1499" />
        }
    }
    @if (!string.IsNullOrEmpty(HelpText)
        || !IsValid)
    {
        <div class="field-helpers">
            @if (!IsValid)
            {
                <ul class="mr-auto mb-0 pl-0">
                    @foreach (var message in GetValidationMessages())
                    {
                        <li>@message</li>
                    }
                </ul>
            }
            else if (!string.IsNullOrEmpty(HelpText))
            {
                <div class="mr-auto">@HelpText</div>
            }
        </div>
    }
</div>


