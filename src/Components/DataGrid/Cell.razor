@namespace Tavenem.Blazor.Framework.InternalComponents.DataGrid

@typeparam TDataItem

<td>
    @if (Editing
        && Column is not null
        && Row is not null
        && Column.CanEdit
        && Column.ActualProperty?.CanWrite == true
        && Column.ActualValue is not null)
    {
        if (Column.EditContent is not null)
        {
            @Column.EditContent(Row.Item!)
        }
        else if (Column.BaseDataType == typeof(string))
        {
            <TextInput Value="@((string?)Column.ActualValue(Row.Item!))"
                       ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                       Format="@Column.Format"
                       FormatProvider="Column.FormatProvider"
                       Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                       Class="dense" />
        }
        else if (Column.BaseDataType == typeof(bool))
        {
            if (Column.IsNullable)
            {
                <Checkbox TValue="bool?"
                          Value="@((bool?)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          AllowNull="true"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
            }
            else
            {
                <Checkbox TValue="bool"
                          Value="@((bool)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
            }
        }
        if (Column.BaseDataType == typeof(byte))
        {
            <NumericInput TValue="byte"
                          Value="@((byte)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(decimal))
        {
            <NumericInput TValue="decimal"
                          Value="@((decimal)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(double))
        {
            <NumericInput TValue="double"
                          Value="@((double)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(float))
        {
            <NumericInput TValue="float"
                          Value="@((float)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(int))
        {
            <NumericInput TValue="int"
                          Value="@((int)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(long))
        {
            <NumericInput TValue="long"
                          Value="@((long)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(nint))
        {
            <NumericInput TValue="nint"
                          Value="@((nint)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(nuint))
        {
            <NumericInput TValue="nuint"
                          Value="@((nuint)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(sbyte))
        {
            <NumericInput TValue="sbyte"
                          Value="@((sbyte)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(short))
        {
            <NumericInput TValue="short"
                          Value="@((short)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(uint))
        {
            <NumericInput TValue="uint"
                          Value="@((uint)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(ulong))
        {
            <NumericInput TValue="ulong"
                          Value="@((ulong)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType == typeof(ushort))
        {
            <NumericInput TValue="ushort"
                          Value="@((ushort)Column.ActualValue(Row.Item!))"
                          ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                          Format="@Column.Format"
                          FormatProvider="Column.FormatProvider"
                          Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                          Class="dense" />
        }
        else if (Column.BaseDataType.IsEnum)
        {
            <Select TValue="object"
                    Value="@(Column.ActualValue(Row.Item!))"
                    ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                    OptionPairs="@(Enum.GetValues(Column.BaseDataType).Cast<object>().Select((x, i) => new KeyValuePair<object, string>(x, x.ToString()?.ToHumanReadable() ?? i.ToString())))"
                    Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                    Class="dense" />
        }
        else if (Column.BaseDataType == typeof(System.DateTime))
        {
            if (Column.IsNullable)
            {
                <DateTimeInput TValue="System.DateTime?"
                               Value="@((System.DateTime?)Column.ActualValue(Row.Item!))"
                               ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                               Format="@Column.Format"
                               FormatProvider="Column.FormatProvider"
                               Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                               Class="dense" />
            }
            else
            {
                <DateTimeInput TValue="System.DateTime"
                               Value="@((System.DateTime)Column.ActualValue(Row.Item!))"
                               ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                               Format="@Column.Format"
                               FormatProvider="Column.FormatProvider"
                               Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                               Class="dense" />
            }
        }
        else if (Column.BaseDataType == typeof(System.DateTimeOffset))
        {
            if (Column.IsNullable)
            {
                <DateTimeInput TValue="System.DateTimeOffset?"
                               Value="@((System.DateTimeOffset?)Column.ActualValue(Row.Item!))"
                               ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                               Format="@Column.Format"
                               FormatProvider="Column.FormatProvider"
                               Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                               Class="dense" />
            }
            else
            {
                <DateTimeInput TValue="System.DateTimeOffset"
                               Value="@((System.DateTimeOffset)Column.ActualValue(Row.Item!))"
                               ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                               Format="@Column.Format"
                               FormatProvider="Column.FormatProvider"
                               Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                               Class="dense" />
            }
        }
        else if (Column.BaseDataType == typeof(System.DateOnly))
        {
            if (Column.IsNullable)
            {
                <DateTimeInput TValue="System.DateOnly?"
                               Value="@((System.DateOnly?)Column.ActualValue(Row.Item!))"
                               ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                               Format="@Column.Format"
                               FormatProvider="Column.FormatProvider"
                               Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                               Class="dense" />
            }
            else
            {
                <DateTimeInput TValue="System.DateOnly"
                               Value="@((System.DateOnly)Column.ActualValue(Row.Item!))"
                               ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                               Format="@Column.Format"
                               FormatProvider="Column.FormatProvider"
                               Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                               Class="dense" />
            }
        }
        else if (Column.BaseDataType == typeof(System.TimeOnly))
        {
            if (Column.IsNullable)
            {
                <DateTimeInput TValue="System.TimeOnly?"
                               Value="@((System.TimeOnly?)Column.ActualValue(Row.Item!))"
                               ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                               Format="@Column.Format"
                               FormatProvider="Column.FormatProvider"
                               Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                               Class="dense" />
            }
            else
            {
                <DateTimeInput TValue="System.TimeOnly"
                               Value="@((System.TimeOnly)Column.ActualValue(Row.Item!))"
                               ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                               Format="@Column.Format"
                               FormatProvider="Column.FormatProvider"
                               Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                               Class="dense" />
            }
        }
        else if (Column.BaseDataType == typeof(System.Drawing.Color))
        {
            if (Column.IsNullable)
            {
                <ColorInput TValue="System.Drawing.Color?"
                            Value="@((System.Drawing.Color?)Column.ActualValue(Row.Item!))"
                            ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                            ColorMode="ColorMode.RGB"
                            Format="@Column.Format"
                            FormatProvider="Column.FormatProvider"
                            Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                            Class="dense" />
            }
            else
            {
                <ColorInput TValue="System.Drawing.Color"
                            Value="@((System.Drawing.Color)Column.ActualValue(Row.Item!))"
                            ValueChanged="@(v => Column.OnSetValue(Row.Item!, v))"
                            ColorMode="ColorMode.RGB"
                            Format="@Column.Format"
                            FormatProvider="Column.FormatProvider"
                            Validation="@((v, _) => Column.CellValidation?.Invoke(v, Row.Item!))"
                            Class="dense" />
            }
        }
        else if (Column.ChildContent is null)
        {
            <span class="@Column.AlignClass">
                @Column.ToString(Row.Item!)
            </span>
        }
        else
        {
            @Column.ChildContent(Row.Item!)
        }
    }
    else if (Column is not null && Row is not null)
    {
        if (Column.ChildContent is null)
        {
            <span class="@Column.AlignClass">
                @Column.ToString(Row.Item!)
            </span>
        }
        else
        {
            @Column.ChildContent(Row.Item!)
        }
    }
</td>
