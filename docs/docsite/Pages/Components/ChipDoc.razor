@page "/components/chip"

<PageTitle>Chip - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Chip</Heading>

<p>
    Chips are simple elements, usually displayed in groups.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    To create a chip, add the <code>chip</code> class to an element (usually a <code>span</code>,
    but possibly a <code>button</code> if the chip is interactive). You can also assign it a theme
    class to color it.
</p>

<CodeExample Code="@(@"<span class=""chip"">Example</span>
<span class=""chip primary"">Primary</span>
<span class=""chip secondary"">Secondary</span>
<span class=""chip tertiary"">Tertiary</span>
<span class=""chip danger""><span class=""icon"">error_outline</span>Danger</span>
<span class=""chip dark"">Dark</span>
<span class=""chip default"">Default</span>
<span class=""chip info""><span class=""icon"">info</span>Info</span>
<span class=""chip success"">Success<span class=""icon"">check_circle</span></span>
<span class=""chip warning""><span class=""icon"">warning_amber</span>Warning</span>")" />

<p>
    To indicate that a non-button chip is interactive, add the <code>clickable</code> class.
</p>

<CodeExample IsOpen="false" Code="@(@"<span class=""chip clickable"">Example</span>
<span class=""chip clickable primary"">Primary</span>
<span class=""chip clickable secondary"">Secondary</span>
<span class=""chip clickable tertiary"">Tertiary</span>
<span class=""chip clickable danger""><span class=""icon"">error_outline</span>Danger</span>
<span class=""chip clickable dark"">Dark</span>
<span class=""chip clickable default"">Default</span>
<span class=""chip clickable info""><span class=""icon"">info</span>Info</span>
<span class=""chip clickable success"">Success<span class=""icon"">check_circle</span></span>
<span class=""chip clickable warning""><span class=""icon"">warning_amber</span>Warning</span>")" />

<Heading Level="HeadingLevel.H2">Disabled</Heading>

<p>
    A chip can be disabled by by using the <code>disabled</code> attribute for a button, or the
    <code>disabled</code> class for other elements. When disabled, the opacity of a chip is lowered,
    rather than using the usual disabled colors.
</p>

<CodeExample IsOpen="false" Code="@(@"<span class=""chip disabled"">Example</span>
<span class=""chip disabled primary"">Primary</span>
<span class=""chip disabled secondary"">Secondary</span>
<span class=""chip disabled tertiary"">Tertiary</span>
<span class=""chip disabled danger""><span class=""icon"">error_outline</span>Danger</span>
<span class=""chip disabled dark"">Dark</span>
<span class=""chip disabled default"">Default</span>
<span class=""chip disabled info""><span class=""icon"">info</span>Info</span>
<span class=""chip disabled success"">Success<span class=""icon"">check_circle</span></span>
<span class=""chip disabled warning""><span class=""icon"">warning_amber</span>Warning</span>")" />

<Heading Level="HeadingLevel.H2">Variants</Heading>

<p>
    The size of a chip can be adjusted with the <code>small</code> and <code>large</code> classes.
</p>

<CodeExample IsOpen="false" RowClass="align-items-center" Code="@(@"<span class=""chip small primary"">Small</span>
<span class=""chip primary"">Normal</span>
<span class=""chip large primary"">Large</span>")" />

<p>
    The background can be reduced to a semitransparent tint by using the <code>chip-text</code>
    class.
</p>

<CodeExample IsOpen="false" Code="@(@"<span class=""chip chip-text"">Example</span>
<span class=""chip chip-text primary"">Primary</span>
<span class=""chip chip-text secondary"">Secondary</span>
<span class=""chip chip-text tertiary"">Tertiary</span>
<span class=""chip chip-text danger""><span class=""icon"">error_outline</span>Danger</span>
<span class=""chip chip-text dark"">Dark</span>
<span class=""chip chip-text default"">Default</span>
<span class=""chip chip-text info""><span class=""icon"">info</span>Info</span>
<span class=""chip chip-text success"">Success<span class=""icon"">check_circle</span></span>
<span class=""chip chip-text warning""><span class=""icon"">warning_amber</span>Warning</span>")" />

<p>
    Chips can also be <code>outlined</code>.
</p>

<CodeExample IsOpen="false" Code="@(@"<span class=""chip outlined"">Example</span>
<span class=""chip outlined primary"">Primary</span>
<span class=""chip outlined secondary"">Secondary</span>
<span class=""chip outlined tertiary"">Tertiary</span>
<span class=""chip outlined danger""><span class=""icon"">error_outline</span>Danger</span>
<span class=""chip outlined dark"">Dark</span>
<span class=""chip outlined default"">Default</span>
<span class=""chip outlined info""><span class=""icon"">info</span>Info</span>
<span class=""chip outlined success"">Success<span class=""icon"">check_circle</span></span>
<span class=""chip outlined warning""><span class=""icon"">warning_amber</span>Warning</span>")" />

<p>
    The <code>square</code> and <code>rounded</code> utility classes can be used to change the shape
    of a chip.
</p>

<CodeExample IsOpen="false" Code="@(@"<span class=""chip square primary"">Primary</span>
<span class=""chip rounded secondary"">Secondary</span>")" />

<Heading Level="HeadingLevel.H2">Component</Heading>

<p>
    You can also display data-bound sets of chips with the <code>ChipSet&lt;T></code> component.
    This component allows you to display a set of chips based on any <code>List&lt;T></code> of
    items, and bind one or more selected items from the list.
</p>

<p>
    Each <code>ChipSet</code> and its child <code>Chip</code>s have a data type, indicated by the
    <code>TChip</code> parameter when it can't be inferred. The items in an <code>ChipSet</code>
    are displayed using either the <code>Template RenderFragment</code> for each item, or if no
    template is provided, with the <code>ToString</code> method of the items.
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet TChip="string" Items="_chips" SelectionType="SelectionType.Single" @bind-SelectedItem="_selectedChip1" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet TChip=""string"" Items=""_chips"" SelectionType=""SelectionType.Single"" @bind-SelectedItem=""_selectedItem"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() { </span><span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span><span class="pre-operator">};</span>
    <span class="pre-element">private</span> <span class="pre-element">string</span><span class="pre-operator">?</span> _selectedItem<span class="pre-operator">;</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Multiselect</Heading>

<p>
    The <code>SelectionType</code> property determines how selection is handled. If it is set to
    <code>None</code> then items are not selectable. If set to <code>Single</code> one item at a
    time may be selected. If set to <code>Multiple</code> any number of items may be selected.
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet Items="_chips" SelectionType="SelectionType.Multiple" @bind-SelectedItems="_selectedChips" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet Items=""_chips"" SelectionType=""SelectionType.Multiple"" @bind-SelectedItems=""_selectedChips"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() { </span><span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span> <span class="pre-operator">};</span>
    <span class="pre-element">private</span> <span class="pre-enum">IEnumerable</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span><span class="pre-operator">?</span> _selectedChips<span class="pre-operator">;</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Required</Heading>

<p>
    You can make the selection required by setting the <code>Required</code> property. Doing so
    prevents de-selecting the last selected item through user interaction. Programmatic changes
    which result in the selection being cleared are still allowed, and no initial selection is
    forced.
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet TChip="string" Items="_chips" SelectionType="SelectionType.Single" @bind-SelectedItem="_selectedChip2" Required="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet TChip=""string"" Items=""_chips"" SelectionType=""SelectionType.Single"" @bind-SelectedItem=""_selectedItem"" Required=""true"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() { </span><span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span> <span class="pre-operator">};</span>
    <span class="pre-element">private</span> <span class="pre-element">string</span><span class="pre-operator">?</span> _selectedItem<span class="pre-operator">;</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Closing</Heading>

<p>
    If you add an event callback to the <code>OnChipClosed</code> property, each chip will
    automatically get a close button which will invoke the handler.
</p>

<p>
    You can also set the <code>AutoClose</code> property to <code>true</code> to show the close
    button, which will simply set the <code>display</code> property to <code>none</code> when
    pressed.
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet Items="_chips2" AutoClose="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet Items=""_chips"" AutoClose=""true"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() { </span><span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span> <span class="pre-operator">};</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Drag and Drop</Heading>

<p>
    Chips in an <code>ChipSet</code> can be draggable, both within the <code>ChipSet</code> (to
    reorder items), and between <code>ChipSet</code>s with the same item type.
</p>

<p>
    To make the items in a <code>ChipSet</code> draggable, set the <code>IsDragStart</code>
    property of the <code>ChipSet</code> to <code>true</code>. To make a
    <code>ChipSet</code> a valid drop destination (including for reordering items within itself)
    set its <code>IsDropTarget</code> property to <code>true</code>.
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet Items="_dragChips" IsDragStart="true" IsDropTarget="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet Items=""_chips"" IsDragStart=""true"" IsDropTarget=""true"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() { </span><span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span> <span class="pre-operator">};</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

<p>
    Individual chips can disable dragging by returning <code>false</code> from a function assigned
    to the <code>ItemIsDraggable</code> property. You can also override the
    <code>GetDropEffect</code> delegate to determine the drag effect for any chip dragged over the
    set. Return <code>DragEffect.None</code> if the set will not accept the drop.
</p>

<p>
    Ordinarily chips which are dropped on a set will be inserted into the set at the position
    where they are dropped. If the drag operation is "move" the chip is removed from its original
    place in the set (even if it was a different set). If it is "copy" the chip will be round-trip
    (de)serialized via JSON, and the copy will be inserted. If the chip cannot be successfully
    round-trip serialized and deserialized to and from JSON, an exception will be thrown. To prevent
    this for chips which are not expected to be copied, you can set the
    <code>DragEffectAllowed</code> property to <code>DragEffect.Move</code> (the default is
    <code>DragEffect.CopyMove</code>).
</p>

<p>
    You can also set a callback on the <code>OnDrop</code> property to bypass the default drop
    process and handle the operation yourself. If you do this, you should also override the
    <code>OnDropped</code> callback to bypass dropped chips' default behavior of removing
    themselves from their place on their current set on a move operation.
</p>

<p>
    A chip which is currently being dragged can have a custom class applied during the drag
    operation, by setting the <code>ItemDraggingClass</code> property.
</p>

<p>
    Likewise, a <code>ChipSet</code> which is the source of a drag operation can have a custom
    class applied by setting the <code>DraggingClass</code> property. You can also override the
    <code>DropClass</code> and <code>NoDropClass</code> properties to override the default CSS
    styles applied when a set is a valid or invalid target for a drop, respectively.
</p>

<Heading Level="HeadingLevel.H3">Chips</Heading>

<p>
    An icon can be automatically displayed before the content of a chip by setting the
    <code>Icon</code> property to a function which returns the name of the icon. The
    <code>IconClass</code> property can be used to customize the class of the icon span ("icon" is
    automatically included).
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet Items="_chips2" Icon="@(_ => "info")" IconClass="@(_ => "info")" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet Items=""_chips"" Icon=""@(_ => ""info"")"" IconClass=""@(_ => ""info"")"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() {</span> <span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span> <span class="pre-operator">};</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

<p>
    You can insert a separator before or after any chip by setting the <code>SeparatorBefore</code>
    and <code>SeparatorAfter</code> properties to functions which return <code>true</code> for the
    appropriate items.
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet Items="_chips2" SeparatorBefore="@(i => i == "Item 2")" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet Items=""_chips"" SeparatorBefore=""@(i => i == ""Item 2"")"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() { </span><span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span> <span class="pre-operator">};</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Customization</Heading>

<p>
    A selection icon normally replaces any icon assigned to a chip via the <code>Icon</code>
    property when the chip is selected. You can disable this behavior by setting the
    <code>ShowSelectionIcon</code> property to <code>false</code>.
</p>

<p>
    The theme color of any chip may be set by assigning a function to the
    <code>ItemThemeColor</code> property. You can override the theme of selected chips by setting
    the <code>SelectedColor</code> property.
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet TChip="string" Items="_chips" SelectionType="SelectionType.Single" @bind-SelectedItem="_selectedChip3" ShowSelectionIcon="false" SelectedColor="ThemeColor.Primary" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet TChip=""string"" Items=""_chips"" SelectionType=""SelectionType.Single"" @bind-SelectedItem=""_selectedItem"" ShowSelectionIcon=""false"" SelectedColor=""ThemeColor.Primary"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() { </span><span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span> <span class="pre-operator">};</span>
    <span class="pre-element">private</span> <span class="pre-element">string</span><span class="pre-operator">?</span> _selectedItem<span class="pre-operator">;</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Clicking</Heading>

<p>
    If you add an event callback to the <code>OnItemClick</code> property, chips will automatically
    receive the <code>clickable</code> class and respond to click events, which will invoke the
    <code>OnItemClick</code> callback.
</p>

<Collapse IsOpen="true" Class="outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ChipSet TChip="string" Items="_chips2" ItemThemeColor="@(_ => _theme)" OnItemClick="@(_ => _theme = ThemeColor.Primary)" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ChipSet Items=""_chips"" ItemThemeColor=""@(_ => _theme)"" OnItemClick=""@(_ => _theme = ThemeColor.Primary)"" />", true)
        <br>
        <pre>
<span class="pre-directive">&#64;code {</span>
    <span class="pre-element">private</span> <span class="pre-enum">ThemeColor</span> _theme <span class="pre-operator">=</span> <span class="pre-enum">ThemeColor</span><span class="pre-operator">.</span>None<span class="pre-operator">;</span>
    <span class="pre-element">private</span> <span class="pre-class">List</span><span class="pre-operator">&lt;</span><span class="pre-element">string</span><span class="pre-operator">&gt;</span> _chips <span class="pre-operator">=</span> <span class="pre-element">new</span><span class="pre-operator">() { </span><span class="pre-string">"Item 1"</span>, <span class="pre-string">"Item 2"</span>, <span class="pre-string">"Item 3"</span> <span class="pre-operator">};</span>
<span class="pre-directive">}</span>
        </pre>
    </ChildContent>
</Collapse>

@code {
    private List<string> _chips = new() { "Chip 1", "Chip 2", "Chip 3" };
    private List<string> _chips2 = new() { "Chip 1", "Chip 2", "Chip 3" };
    private List<string> _dragChips = new() { "Chip 1", "Chip 2", "Chip 3" };
    private string? _selectedChip1;
    private string? _selectedChip2;
    private string? _selectedChip3;
    private IEnumerable<string>? _selectedChips;
    private ThemeColor _theme = ThemeColor.None;
}
